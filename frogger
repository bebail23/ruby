require 'ruby2d'

# Begin block will automatically run once program is started
BEGIN{
    require 'ruby2d'

    # set up window
    set title: "Frogger"
    set width: 640
    set height: 600
    set background: 'green'
    
    #Create a hash table for usernames as the key and scores as the value 
    # We can use a timer to calculate scores 
    # create hash table for usernames and scores
    user_scores = {}
    # ask user for username and store in hash table
    #username = puts("Please enter your username:")
    #user_scores[username] = 0

    # Starting grass patch for frog
    grass = Rectangle.new(x: 0, y: 550, width: 640, height: 50, color: 'green')
    # River for crocs
    river = Rectangle.new(x: 0, y: 500, width: 640, height: 50, color: 'blue')
    # River for log
    riverLog = Rectangle.new(x: 0, y: 105, width: 640, height: 40, color: 'blue')
    # Road for cars
    road = Rectangle.new(x: 0, y: 350, width: 640, height: 75, color: 'black')
    # Road 2
    road = Rectangle.new(x: 0, y: 200, width: 640, height: 75, color: 'black')

    # Log for frog to land on to end game
    # Created our own png
    theLog = Sprite.new(
        'log.png',
        x: 0,
        y: 100,
        width: 150,
        height: 75
    )

    # create movable frog sprite
    # Png used from pngWing
    frog = Sprite.new(
    'frog.png',
    x: 300,
    y: 550,
    width: 40,
    height: 40
    )


    # create cars
    # png used from pngWing
    cars = []
    #min_y = 25
    #max_y = 500
    4.times do |i|
    cars << Sprite.new(
        'car.png',
        x: i * 150 + 50,
        #y: (500 - (rand(get(:width)))),
        y: 360 + rand(-35..35),
        #y: rand(min_y..max_y),
        width: 75,
        height: 50
    )
    end

    # create cars
    # png used from pngWing
    cars_two = []
    #min_y = 25
    #max_y = 500
    5.times do |i|
    cars_two << Sprite.new(
        'cartwo.png',
        x: i * 150 + 50,
        #y: (500 - (rand(get(:width)))),
        y: 200 + rand(-20..20),
        #y: rand(min_y..max_y),
        width: 75,
        height: 50
    )
    end

    # create crocs
    # From pngWing
    crocs = []
    4.times do |i|
    crocs << Sprite.new(
        'croc.png',
        x: i * 150 + 50,
        y: 475,
        width: 75,
        height: 90
    )
    end

}

# Main begins after BEGIN Block
# handle movement
on :key_down do |event|
    case event.key
    when 'left'
        Thread.new do
            frog.x -= 25 if frog.x > 0
            sleep(0.1)
        end
    when 'right'
        Thread.new do
            frog.x += 25 if frog.x < (640 - frog.width)
            sleep(0.1)
        end
    when 'up'
        Thread.new do
            frog.y -= 30 if frog.y > 0
            sleep(0.1)
        end
    when 'down'
        Thread.new do
            frog.y += 30 if frog.y < (600 - frog.height)
            sleep(0.1)
        end
    end
end 

def collides_with?(sprite1, sprite2)
    left1 = sprite1.x
    right1 = sprite1.x + sprite1.width
    top1 = sprite1.y
    bottom1 = sprite1.y + (sprite1.height)

    left2 = sprite2.x
    right2 = sprite2.x + sprite2.width
    top2 = sprite2.y
    bottom2 = sprite2.y + (sprite2.height)

    if bottom1-20 < top2 || top1+20 > bottom2 || right1 < left2 || left1 > right2
        return false
    else
        return true
    end
end

timeStart = Time.new
puts "Current time:" + timeStart.inspect

logDirection = :right

# start game loop
game_over = false
update do

  # move landing log
  if logDirection == :right
    theLog.x += 2
    # If the log sprite goes off the right side of the screen, change direction to left
    if theLog.x + theLog.width > Window.width
      logDirection = :left
    end
  else
    theLog.x -= 2
    # If the log sprite goes off the left side of the screen, change direction to right
    if theLog.x < 0
      logDirection = :right
    end
  end

  # move cars
  cars.each_with_index do |car, i|
    car.x += i.even? ? -2 : 3
    if car.x < -car.width
      car.x = 640
    elsif car.x > 640
        car.x = -car.width
    end
  end

   # move cars
   cars_two.each_with_index do |car, i|
    car.x += i.even? ? -2 : 2
    if car.x < -car.width
      car.x = 640
    elsif car.x > 640
      car.x = -car.width
    end
  end

  # move crocs
  crocs.each_with_index do |croc, i|
    croc.x += i.even? ? -2 : 2
    if croc.x < -croc.width
      croc.x = 640
    elsif croc.x > 640
      croc.x = -croc.width
    end
  end

    
  # Collision checking 
   game_over = false
   on_log = false

    # Did the frog land on the log, if it did move the same as the log
    if collides_with?(frog,theLog)
        on_log = true
        frog.x += ((theLog.x+50) - frog.x)
    end

    # Did the frog land in the river without being on the log, if it did back to start
    if collides_with?(frog,riverLog)
        puts "landed in river"
        if !on_log
            frog.y = 550
            frog.x = 300
            game_over = true
        end
    end

    # check for collisions with cars
    cars.each do |car|
        if collides_with?(frog,car)
            puts "inside collision with car"
            frog.y = 550
            frog.x = 300
            game_over = true
        end
    end

     # check for collisions with second set of cars
    cars_two.each do |car|
        if collides_with?(frog,car)
            puts "inside collision with car"
            frog.y = 550
            frog.x = 300
            game_over = true
        end
    end

    # check for collisions with cars
    crocs.each do |croc|
        if collides_with?(frog,croc)
            puts "inside collision with croc"
            frog.y = 550
            frog.x = 300
            game_over = true
        end
    end

    # Check if a collision occured and 
    if game_over == true 
        #loser = Rectangle.new(x: 300, y: 440, width: 80, height: 30, color: 'green')
        #Text.new('You lost!', x: 310, y: 440, size: 20)
        puts "gameOver"
    end

   # check if frog has made it to the other side
   if frog.y < 100
     set title: "You Win!"
     #pause
   end


end
# end of update loop


# show window
show
